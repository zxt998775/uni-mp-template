{"version":3,"file":"http.js","sources":["../../../../src/utils/http.ts"],"sourcesContent":["// src/utils/http.ts\nimport { useMemberStore } from '@/stores'\n\n// 请求基地址\nconst baseURL = import.meta.env.VITE_API_URL as string\n// 拦截器配置\nconst httpInterceptor = {\n  // 拦截前触发\n  invoke(options: UniApp.RequestOptions) {\n    // 1. 非 http 开头需拼接地址\n\n    if (!options.url.startsWith('http')) {\n      options.url = baseURL + options.url\n    }\n\n    // 2. 请求超时\n\n    options.timeout = 10000\n\n    // 3. 添加小程序端请求头标识\n\n    options.header = {\n      'source-client': 'miniapp',\n\n      ...options.header\n    }\n\n    // 4. 添加 token 请求头标识\n\n    const memberStore = useMemberStore()\n\n    const token = memberStore.profile?.token\n\n    if (token) {\n      options.header.Authorization = token\n    }\n  }\n}\n\n// 拦截 request 请求\n\nuni.addInterceptor('request', httpInterceptor)\n\n// 拦截 uploadFile 文件上传\n\nuni.addInterceptor('uploadFile', httpInterceptor)\n\n/**\n * 请求函数\n * @param  UniApp.RequestOptions\n * @returns Promise\n *  1. 返回 Promise 对象，用于处理返回值类型\n *  2. 获取数据成功\n *    2.1 提取核心数据 res.data\n *    2.2 添加类型，支持泛型\n *  3. 获取数据失败\n *    3.1 401错误  -> 清理用户信息，跳转到登录页\n *    3.2 其他错误 -> 根据后端错误信息轻提示\n *    3.3 网络错误 -> 提示用户换网络\n */\n\ntype Data<T> = {\n  code: string\n  msg: string\n  result: T\n}\n\n// 2.2 添加类型，支持泛型\n\nexport const http = <T>(options: UniApp.RequestOptions) => {\n  // 1. 返回 Promise 对象\n  return new Promise<Data<T>>((resolve, reject) => {\n    uni.request({\n      ...options,\n      // 响应成功\n      success(res) {\n        // 状态码 2xx，参考 axios 的设计\n        if (res.statusCode >= 200 && res.statusCode < 300) {\n          // @ts-ignore\n          if (res.data.code !== 0) {\n            // 根据后端错误信息轻提示\n            uni.showToast({\n              icon: 'error',\n              title: (res.data as Data<T>).msg || '请求错误'\n            })\n          } else {\n            // 提取核心数据 res.data\n            resolve(res.data as Data<T>)\n          }\n        } else if (res.statusCode === 401) {\n          // 401错误  -> 清理用户信息，跳转到登录页\n          const memberStore = useMemberStore()\n          memberStore.clearProfile()\n          uni.navigateTo({ url: '/pages/login/login' })\n          reject(res)\n        } else {\n          // 其他错误 -> 根据后端错误信息轻提示\n          uni.showToast({\n            icon: 'none',\n            title: (res.data as Data<T>).msg || '请求错误'\n          })\n          reject(res)\n        }\n      },\n\n      // 响应失败\n\n      fail(err) {\n        uni.showToast({\n          icon: 'none',\n          title: '网络错误，换个网络试试'\n        })\n        reject(err)\n      }\n    })\n  })\n}\n"],"names":["useMemberStore","uni"],"mappings":";;;;AAIA,MAAM,UAAU;AAEhB,MAAM,kBAAkB;AAAA;AAAA,EAEtB,OAAO,SAAgC;;AAGrC,QAAI,CAAC,QAAQ,IAAI,WAAW,MAAM,GAAG;AAC3B,cAAA,MAAM,UAAU,QAAQ;AAAA,IAClC;AAIA,YAAQ,UAAU;AAIlB,YAAQ,SAAS;AAAA,MACf,iBAAiB;AAAA,MAEjB,GAAG,QAAQ;AAAA,IAAA;AAKb,UAAM,cAAcA,sBAAAA;AAEd,UAAA,SAAQ,iBAAY,YAAZ,mBAAqB;AAEnC,QAAI,OAAO;AACT,cAAQ,OAAO,gBAAgB;AAAA,IACjC;AAAA,EACF;AACF;AAIAC,cAAAA,MAAI,eAAe,WAAW,eAAe;AAI7CA,cAAAA,MAAI,eAAe,cAAc,eAAe;AAwBnC,MAAA,OAAO,CAAI,YAAmC;AAEzD,SAAO,IAAI,QAAiB,CAAC,SAAS,WAAW;AAC/CA,kBAAAA,MAAI,QAAQ;AAAA,MACV,GAAG;AAAA;AAAA,MAEH,QAAQ,KAAK;AAEX,YAAI,IAAI,cAAc,OAAO,IAAI,aAAa,KAAK;AAE7C,cAAA,IAAI,KAAK,SAAS,GAAG;AAEvBA,0BAAAA,MAAI,UAAU;AAAA,cACZ,MAAM;AAAA,cACN,OAAQ,IAAI,KAAiB,OAAO;AAAA,YAAA,CACrC;AAAA,UAAA,OACI;AAEL,oBAAQ,IAAI,IAAe;AAAA,UAC7B;AAAA,QAAA,WACS,IAAI,eAAe,KAAK;AAEjC,gBAAM,cAAcD,sBAAAA;AACpB,sBAAY,aAAa;AACzBC,wBAAAA,MAAI,WAAW,EAAE,KAAK,qBAAsB,CAAA;AAC5C,iBAAO,GAAG;AAAA,QAAA,OACL;AAELA,wBAAAA,MAAI,UAAU;AAAA,YACZ,MAAM;AAAA,YACN,OAAQ,IAAI,KAAiB,OAAO;AAAA,UAAA,CACrC;AACD,iBAAO,GAAG;AAAA,QACZ;AAAA,MACF;AAAA;AAAA,MAIA,KAAK,KAAK;AACRA,sBAAAA,MAAI,UAAU;AAAA,UACZ,MAAM;AAAA,UACN,OAAO;AAAA,QAAA,CACR;AACD,eAAO,GAAG;AAAA,MACZ;AAAA,IAAA,CACD;AAAA,EAAA,CACF;AACH;;"}